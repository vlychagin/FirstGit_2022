<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAYAAAAPAAAAFQAAABYAAAAWAAAAFQAAAA8AAAAGAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAOAAAAIAAAADQAAABAAAAAQwAAAEMAAABAAAAANAAA
        ACAAAAAOAAAAAwAAAAAAAAAAAAAAAAAAAAQAAAANAAAAFQAAABYAAAAWAAAAFgAAABYAAAAWAAAAFgAA
        ABYAAAAWAAAAFgAAABYAAAAWAAAAFgAAABYAAAAWAAAAHQAAAC8ARSVpAHxD0QCKSf8AiUn/AIlJ/wCK
        Sf8AfEPRAEUlaQAAAC0AAAASAAAAAwAAAAAAAAAAAAAADQAAACsAAAA/AAAAQwAAAEMAAABDAAAAQwAA
        AEMAAABDAAAAQwAAAEMAAABDAAAAQwAAAEMAAABDAAAAQwAAAEMAAABGAHI4tACRUv8Atnn/AM2Q/wDR
        lP8A0ZT/AM2Q/wC2ef8AkVL/AHQ/tAAAAC0AAAAOAAAAAQAAAAAAAAAVM4O7xDaPzv81jsz/NY7M/zWO
        zP81jsz/NY7M/zaQzP85msz/JB3j/yYl4v8mJuL/Jibi/yYm4v8nJeX/Kx3w/xyYhf8AmFD/AMuO/wDN
        j/8AyYr/AMaF/wDGhf8AyYr/AM2P/wDLj/8Allb/AHZAsQAAACAAAAAGAAAAAAAAABY2j87/g9///3ja
        //942f//eNn//3jZ//942f//edv//37o//8gGOH/VWHy/09c8f9PXPH/T1zx/1hf+f8eOMP/AJlD/wDK
        if8Ayoz/AMeI/wDDgP///////////wDDgP8Ax4j/AMqM/wDJjf8AklH/AE0qXQAAAA8AAAAAAAAAFjWO
        zf+G3P//bs/+/2/P/f9vz/3/b8/9/2/P/f9w0f3/dd///x4V3/9YZPD/SFTu/0hU7v9JU/D/XF77/wds
        cf8At2z/AMmJ/wDFhv8Aw4P/AL55////////////AL55/wDDg/8AxYb/AMiK/wCzdP8AgEXNAAAAFQAA
        AAAAAAAWNI7M/4zc//9ny/v/acv6/2nL+v9py/r/acv6/2rO+v9v2/z/HhXf/1xo8P9DUe3/Q1Lt/0NQ
        7/9gYP7/AJE2/wDHg/8Aw4L/AL58/wC8d/8AuG////////////8AuG//ALx3/wC+fP8Aw4P/AMWH/wCK
        Sv8AAAAWAAAAAAAAABYzjs3/lNz9/2HH+P9jx/j/ZMf4/2TH+P9kx/j/Zcr4/2nX+v8eFeD/YW3w/z9N
        7P9ATuz/QEzu/2Zk//8Ajjf/Gs6T/wC9ev///////////////////////////////////////////wC9
        ev8bzZb/AIlJ/wAAABYAAAAAAAAAFjOOzf+d3v7/XcP2/1/E9v9gxPb/YMT2/2DE9v9hx/b/ZdP4/x4V
        4P9mc/H/Okrr/zxL6/87SO3/a2n//wCNNv831J//ALt2////////////////////////////////////
        ////////ALt3/znTov8AiUj/AAAAFQAAAAAAAAAWM47N/6Xf/f9Wv/T/WsD0/1vA9P9bwPT/W8D0/1zC
        9P9fzvb/HhXg/2t47/83Rur/OUfq/zdE7P9vcPz/AI80/2zdtf8Au3j/ALl0/wC3cf8Asmj/////////
        //8Asmj/ALdx/wC5dP8Au3j/bty5/wCJR/8AAAAPAAAAAAAAABYyjc3/r+L9/1C68/9VvPP/Vrzz/1a8
        8/9WvPP/V77z/1nK9f8eFeD/cn3w/zNE6f81Run/NELq/3V3+f8AaW7/YMqY/yrJlP8Aunj/ALl4/wC0
        bv///////////wC0bv8AuXj/ALp4/yrIlf9jx6D/AIVGxAAAAAYAAAAAAAAAFjGNzf+65v3/S7fx/1G5
        8f9SufH/Urnx/1K58f9Tu/H/Vcfy/x4V4P95g/D/LkDo/zFC6P8uP+j/eoH2/xczwf8Gmkf/jOPC/x3E
        iv8At3T/ALNt////////////ALNt/wC3dP8dxIv/jeLG/wyUV/8Acz8+AAAAAQAAAAAAAAAWMI3N/8Tp
        /f9Fsu//S7Tv/0217/9Nte//TbXv/0637/9QwvD/HxXh/3+K8f8qPOb/Lj/n/yo85/+AifT/IxXs/xWk
        gP8PmVL/luPF/1zUqv8LvH7/ALBo/wCwaP8LvH//XdSs/5jkyf8Uml7/AIVHnAAAAAMAAAAAAAAABAAA
        AB4wjc3/0u/+/z+u7f9Gse3/SLHt/0ix7f9Ise3/SLTt/0q+7v8fFeH/hpHx/yY55f8qPOb/Jjnl/4aR
        8v8hFuX/T8D7/xibjP8DkUf/W8KU/5Phw/+d58z/nefM/5TixP9dxJj/CZRT/wCEQ5wAAAADAAAAAAAA
        AAAAAAANAAAAMDKOzv/j9///PKzt/0Kv7f9EsO3/RLDt/0Sw7f9Esu3/Rrzt/yEX4v+Rm/L/Iznk/yY7
        5f8jOeT/kZvy/yEY4/9HvPH/SLP4/zGnyv8Kk3P/AIY0/wCGNv8Ahjb/AIc2/wmLb/8ANxhOAAAAEAAA
        AAAAAAAAAAAAAAAAABQygri9M43N/y+Kyv8yisr/NYvK/zWLyv81i8r/NYvK/zaOyv84mMr/Ihri/yEg
        4f8kI+H/JSTh/yQj4f8hIOH/Ihri/ziYyv82jsz/N4zQ/zmN1P86jtf/Oo7Y/zqO2P85jtj/Oo/Z/zyN
        1OoAAAAWAAAAAAAAAAAAAAAAAAAAFjWPzv+Q4f//cdP//3PT//901P//dNT//3TU//901P//ddb//3ji
        //8gF+H/XWvx/0pX8P9LWfD/Slfw/11r8f8gF+H/eOL//3XW//901P//ddT//3XU//911f//dNT//3PU
        //+S4v//No/Q/wAAABYAAAAAAAAAAAAAAAAAAAAWMo3N/63k/v9awff/XcL3/1/C9/9fwvf/X8L3/1/C
        9/9fxff/Y9H4/x0U4P9xfPH/OUnr/zpL6/85Sev/cXzx/x0U4P9j0fj/X8X3/1/C9/9fwvf/X8L3/1/C
        9/9dwvf/WsH3/63k/v8yjc3/AAAAFgAAAAAAAAAAAAAAAAAAABQwjc3/1fD+/0Ox7/9Isu//SbPv/0mz
        7/9Js+//SbPv/0m17/9NwPD/GhHg/4mS8v8pO+f/Kz3n/yk75/+JkvL/GhHg/03A8P9Jte//SbPv/0mz
        7/9Js+//SbPv/0iy7/9Dse//1fD+/zCNzf8AAAAWAAAAAAAAAAAAAAAAAAAADTCNzf+f1/f/ndP0/6DT
        9P+h1PT/odT0/6HU9P+h1PT/otb0/6bg9f9gVuj/YnDr/2Rz6/9lc+v/ZHPr/2Jw6/9gVuj/puD1/6LW
        9P+h1PT/odT0/6HU9P+h1PT/oNP0/53T9P+f1/f/MI3N/wAAABAAAAAAAAAAAAAAAAAAAAAEMIjFsvH8
        //9n0v//atL//23T//9u0///btT//27U//9v1v//ct///0dS7/9HUvH/SVXx/0lV8f9JVfH/R1Lx/0dS
        7/9y3///b9b//27U//9u1P//btP//23T//9q0v//Z9L///H8//8xjMzqAAAABQAAAAAAAAAAAAAAAAAA
        AAAAAAAGLIzL/+/8/f9gzvv/ZtP7/2nW/P9r1/3/a9j+/2zZ/v9u4P//VIb2/0VS8v9GVvP/R1bz/0dW
        8/9FU/P/VIb3/2/g//9s2f7/a9j+/2vX/f9p1vz/ZtL7/2DO+//v+/7/LIvM/wAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAGNVzi/8zF/f8gHNX/IBvO/xwWyP8XEcD/EQu6/wwHs/8IBqz/AwOn/wAA
        oP8AAJj/AACW/wAAnf8CAKX/BwGs/wwFtP8RC7v/FxPD/xoXy/8dGdL/zMT9/zdb4/8AAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOKVze/5+m9/9XaPD/TV/u/0VV6f9BTOT/PELf/zc7
        2v8zMtX/LyvR/yogzP8mLeD/Ljjh/zdB5P8/TOf/SFfq/1Jk7f9lePH/doXz/6Ss+P8sW+D/AAAAEQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJka5x0UVrT/wUGqf8LC7D/FBa6/xwh
        xP8kKs3/LTTY/zM11v8uLdH/KiPL/yoy3/8xO+D/Okfk/y002P8jJ83/GR3C/w8Rtv8AAqn/NTi+/3qA
        y6QAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpmn9/8AAJj/BQWq/w8R
        tP8XGbz/HiLF/yQqzf8yOtn/NTjY/zAv1P8pKNX/KzXi/zY/4f8+TOT/QlDk/yMpzv8ZHcP/EhS5/wcJ
        rf8AAJv/for3/wAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWiZf3/wAA
        mf8FBqr/DxCz/xUYu/8bH8P/ND7a/zxG3/82Pdr/MTDW/zZv0f86hdX/O0Pj/0JQ5f9LXej/V2jp/zpD
        0v8JC7X/AAGp/wMEpf9sefX/AAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABR0gvX/Cwyp/wAApf8FBa7/JCnF/z9P4f9CUeb/PEjg/zhA3P8zMdj/LGaiMTOMsy8+RuDORlbm/1Jl
        6f9qe+z/hpTx/52r9f+Pnfb/doL1/1hm8v8AAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAADF5r8v+DkPX/nqv2/4qa9P9vgO7/Vmjr/0JU5/8+TOL/OkTe/zIyyXYAAAACAAAAAAAA
        AAZMXej/YXHq/3eI7f+QnvD/jZnx/3WC8f9fa/H/S1bnsgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADTlrjjWp28f+Kl/H/kJ3w/3eG7v9fcer/SFvo/z9P5P87RdivAAAABAAA
        AAAAAAAAAAAAAAAAAARse+atiJbu/5Gd8P96h/D/ZXHw/1Bc6rAAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACW2bkdniD7/mSnvD/hJLu/2x96/9XZ+j5QFHadgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///gB///wAOAAAABgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAAAEAAAADAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAAB4AAAA/AAAAf4AAAP+AA
        AD/gAAA/4AAAP+AAAD/gAQA/4AOAf/AH//8=
</value>
  </data>
</root>